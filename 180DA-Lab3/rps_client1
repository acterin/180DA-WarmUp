import paho.mqtt.client as mqtt
import random

def on_connect(client, userdata, flags, rc):
    print("Connected with result code {rc}")
    client.subscribe("rps/game/player2")

def on_message(client, userdata, msg):
    opponent_move = msg.payload.decode()
    print("Opponent chose: {opponent_move}")

    # Determine the result of the game
    result = determine_winner(player_move, opponent_move)
    print("Result: {result}")

def on_disconnect(client, userdata, rc):
    if rc != 0:
        print('Unexpected Disconnect')
    else:
        print('Expected Disconnect')

def determine_winner(player, opponent):
    if player == opponent:
        return "It's a tie!"
    elif (player == "rock" and opponent == "scissors") or \
         (player == "paper" and opponent == "rock") or \
         (player == "scissors" and opponent == "paper"):
        return "You win!"
    else:
        return "You lose!"

client = mqtt.Client()

# Generate a random move for client1
player_move = random.choice(["rock", "paper", "scissors"])

client.on_connect = on_connect
client.on_message = on_message

client.connect_async('mqtt.eclipseprojects.io')
client.loop_start()
client.publish("rps/game/player1", player_move)

client.loop_forever()